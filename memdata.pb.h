// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: memdata.proto

#ifndef PROTOBUF_memdata_2eproto__INCLUDED
#define PROTOBUF_memdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace memcache_router {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_memdata_2eproto();
void protobuf_AssignDesc_memdata_2eproto();
void protobuf_ShutdownFile_memdata_2eproto();

class KeyValue;
class Server;
class Breakdown;
class Stats;
class Instruction;

// ===================================================================

class KeyValue : public ::google::protobuf::Message {
 public:
  KeyValue();
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValue& default_instance();

  void Swap(KeyValue* other);

  // implements Message ----------------------------------------------

  KeyValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional bytes val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline const ::std::string& val() const;
  inline void set_val(const ::std::string& value);
  inline void set_val(const char* value);
  inline void set_val(const void* value, size_t size);
  inline ::std::string* mutable_val();
  inline ::std::string* release_val();
  inline void set_allocated_val(::std::string* val);

  // optional uint32 flags = 3;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 3;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // optional uint64 expire_in_seconds = 4 [default = 0];
  inline bool has_expire_in_seconds() const;
  inline void clear_expire_in_seconds();
  static const int kExpireInSecondsFieldNumber = 4;
  inline ::google::protobuf::uint64 expire_in_seconds() const;
  inline void set_expire_in_seconds(::google::protobuf::uint64 value);

  // optional uint64 cas = 5 [default = 0];
  inline bool has_cas() const;
  inline void clear_cas();
  static const int kCasFieldNumber = 5;
  inline ::google::protobuf::uint64 cas() const;
  inline void set_cas(::google::protobuf::uint64 value);

  // optional bool allow_replace = 6 [default = true];
  inline bool has_allow_replace() const;
  inline void clear_allow_replace();
  static const int kAllowReplaceFieldNumber = 6;
  inline bool allow_replace() const;
  inline void set_allow_replace(bool value);

  // optional uint64 default_counter_val = 7 [default = 0];
  inline bool has_default_counter_val() const;
  inline void clear_default_counter_val();
  static const int kDefaultCounterValFieldNumber = 7;
  inline ::google::protobuf::uint64 default_counter_val() const;
  inline void set_default_counter_val(::google::protobuf::uint64 value);

  // optional int32 offset = 8 [default = 0];
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 8;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // optional uint64 counter_val = 9;
  inline bool has_counter_val() const;
  inline void clear_counter_val();
  static const int kCounterValFieldNumber = 9;
  inline ::google::protobuf::uint64 counter_val() const;
  inline void set_counter_val(::google::protobuf::uint64 value);

  // optional int32 server_index = 10;
  inline bool has_server_index() const;
  inline void clear_server_index();
  static const int kServerIndexFieldNumber = 10;
  inline ::google::protobuf::int32 server_index() const;
  inline void set_server_index(::google::protobuf::int32 value);

  // optional bool no_propagate = 11 [default = false];
  inline bool has_no_propagate() const;
  inline void clear_no_propagate();
  static const int kNoPropagateFieldNumber = 11;
  inline bool no_propagate() const;
  inline void set_no_propagate(bool value);

  // optional int32 return_code = 14 [default = 0];
  inline bool has_return_code() const;
  inline void clear_return_code();
  static const int kReturnCodeFieldNumber = 14;
  inline ::google::protobuf::int32 return_code() const;
  inline void set_return_code(::google::protobuf::int32 value);

  // optional string return_error = 15;
  inline bool has_return_error() const;
  inline void clear_return_error();
  static const int kReturnErrorFieldNumber = 15;
  inline const ::std::string& return_error() const;
  inline void set_return_error(const ::std::string& value);
  inline void set_return_error(const char* value);
  inline void set_return_error(const char* value, size_t size);
  inline ::std::string* mutable_return_error();
  inline ::std::string* release_return_error();
  inline void set_allocated_return_error(::std::string* return_error);

  // @@protoc_insertion_point(class_scope:memcache_router.KeyValue)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_val();
  inline void clear_has_val();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_expire_in_seconds();
  inline void clear_has_expire_in_seconds();
  inline void set_has_cas();
  inline void clear_has_cas();
  inline void set_has_allow_replace();
  inline void clear_has_allow_replace();
  inline void set_has_default_counter_val();
  inline void clear_has_default_counter_val();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_counter_val();
  inline void clear_has_counter_val();
  inline void set_has_server_index();
  inline void clear_has_server_index();
  inline void set_has_no_propagate();
  inline void clear_has_no_propagate();
  inline void set_has_return_code();
  inline void clear_has_return_code();
  inline void set_has_return_error();
  inline void clear_has_return_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* val_;
  ::google::protobuf::uint64 expire_in_seconds_;
  ::google::protobuf::uint64 cas_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::uint64 default_counter_val_;
  ::google::protobuf::uint64 counter_val_;
  bool allow_replace_;
  bool no_propagate_;
  ::google::protobuf::int32 server_index_;
  ::std::string* return_error_;
  ::google::protobuf::int32 return_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_memdata_2eproto();
  friend void protobuf_AssignDesc_memdata_2eproto();
  friend void protobuf_ShutdownFile_memdata_2eproto();

  void InitAsDefaultInstance();
  static KeyValue* default_instance_;
};
// -------------------------------------------------------------------

class Server : public ::google::protobuf::Message {
 public:
  Server();
  virtual ~Server();

  Server(const Server& from);

  inline Server& operator=(const Server& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Server& default_instance();

  void Swap(Server* other);

  // implements Message ----------------------------------------------

  Server* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Server& from);
  void MergeFrom(const Server& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string hostname = 1;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 1;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const char* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:memcache_router.Server)
 private:
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* hostname_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_memdata_2eproto();
  friend void protobuf_AssignDesc_memdata_2eproto();
  friend void protobuf_ShutdownFile_memdata_2eproto();

  void InitAsDefaultInstance();
  static Server* default_instance_;
};
// -------------------------------------------------------------------

class Breakdown : public ::google::protobuf::Message {
 public:
  Breakdown();
  virtual ~Breakdown();

  Breakdown(const Breakdown& from);

  inline Breakdown& operator=(const Breakdown& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Breakdown& default_instance();

  void Swap(Breakdown* other);

  // implements Message ----------------------------------------------

  Breakdown* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Breakdown& from);
  void MergeFrom(const Breakdown& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double average = 1;
  inline bool has_average() const;
  inline void clear_average();
  static const int kAverageFieldNumber = 1;
  inline double average() const;
  inline void set_average(double value);

  // optional uint64 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint64 count() const;
  inline void set_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:memcache_router.Breakdown)
 private:
  inline void set_has_average();
  inline void clear_has_average();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double average_;
  ::google::protobuf::uint64 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_memdata_2eproto();
  friend void protobuf_AssignDesc_memdata_2eproto();
  friend void protobuf_ShutdownFile_memdata_2eproto();

  void InitAsDefaultInstance();
  static Breakdown* default_instance_;
};
// -------------------------------------------------------------------

class Stats : public ::google::protobuf::Message {
 public:
  Stats();
  virtual ~Stats();

  Stats(const Stats& from);

  inline Stats& operator=(const Stats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stats& default_instance();

  void Swap(Stats* other);

  // implements Message ----------------------------------------------

  Stats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stats& from);
  void MergeFrom(const Stats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .memcache_router.Breakdown push_latency = 1;
  inline bool has_push_latency() const;
  inline void clear_push_latency();
  static const int kPushLatencyFieldNumber = 1;
  inline const ::memcache_router::Breakdown& push_latency() const;
  inline ::memcache_router::Breakdown* mutable_push_latency();
  inline ::memcache_router::Breakdown* release_push_latency();
  inline void set_allocated_push_latency(::memcache_router::Breakdown* push_latency);

  // optional .memcache_router.Breakdown pop_latency = 2;
  inline bool has_pop_latency() const;
  inline void clear_pop_latency();
  static const int kPopLatencyFieldNumber = 2;
  inline const ::memcache_router::Breakdown& pop_latency() const;
  inline ::memcache_router::Breakdown* mutable_pop_latency();
  inline ::memcache_router::Breakdown* release_pop_latency();
  inline void set_allocated_pop_latency(::memcache_router::Breakdown* pop_latency);

  // optional .memcache_router.Breakdown batch_size = 3;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 3;
  inline const ::memcache_router::Breakdown& batch_size() const;
  inline ::memcache_router::Breakdown* mutable_batch_size();
  inline ::memcache_router::Breakdown* release_batch_size();
  inline void set_allocated_batch_size(::memcache_router::Breakdown* batch_size);

  // optional .memcache_router.Breakdown loop_latency = 4;
  inline bool has_loop_latency() const;
  inline void clear_loop_latency();
  static const int kLoopLatencyFieldNumber = 4;
  inline const ::memcache_router::Breakdown& loop_latency() const;
  inline ::memcache_router::Breakdown* mutable_loop_latency();
  inline ::memcache_router::Breakdown* release_loop_latency();
  inline void set_allocated_loop_latency(::memcache_router::Breakdown* loop_latency);

  // optional .memcache_router.Breakdown packet_latency = 5;
  inline bool has_packet_latency() const;
  inline void clear_packet_latency();
  static const int kPacketLatencyFieldNumber = 5;
  inline const ::memcache_router::Breakdown& packet_latency() const;
  inline ::memcache_router::Breakdown* mutable_packet_latency();
  inline ::memcache_router::Breakdown* release_packet_latency();
  inline void set_allocated_packet_latency(::memcache_router::Breakdown* packet_latency);

  // optional .memcache_router.Breakdown cache_hit = 6;
  inline bool has_cache_hit() const;
  inline void clear_cache_hit();
  static const int kCacheHitFieldNumber = 6;
  inline const ::memcache_router::Breakdown& cache_hit() const;
  inline ::memcache_router::Breakdown* mutable_cache_hit();
  inline ::memcache_router::Breakdown* release_cache_hit();
  inline void set_allocated_cache_hit(::memcache_router::Breakdown* cache_hit);

  // optional .memcache_router.Breakdown cache_miss = 7;
  inline bool has_cache_miss() const;
  inline void clear_cache_miss();
  static const int kCacheMissFieldNumber = 7;
  inline const ::memcache_router::Breakdown& cache_miss() const;
  inline ::memcache_router::Breakdown* mutable_cache_miss();
  inline ::memcache_router::Breakdown* release_cache_miss();
  inline void set_allocated_cache_miss(::memcache_router::Breakdown* cache_miss);

  // optional bool touch = 100;
  inline bool has_touch() const;
  inline void clear_touch();
  static const int kTouchFieldNumber = 100;
  inline bool touch() const;
  inline void set_touch(bool value);

  // @@protoc_insertion_point(class_scope:memcache_router.Stats)
 private:
  inline void set_has_push_latency();
  inline void clear_has_push_latency();
  inline void set_has_pop_latency();
  inline void clear_has_pop_latency();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_loop_latency();
  inline void clear_has_loop_latency();
  inline void set_has_packet_latency();
  inline void clear_has_packet_latency();
  inline void set_has_cache_hit();
  inline void clear_has_cache_hit();
  inline void set_has_cache_miss();
  inline void clear_has_cache_miss();
  inline void set_has_touch();
  inline void clear_has_touch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::memcache_router::Breakdown* push_latency_;
  ::memcache_router::Breakdown* pop_latency_;
  ::memcache_router::Breakdown* batch_size_;
  ::memcache_router::Breakdown* loop_latency_;
  ::memcache_router::Breakdown* packet_latency_;
  ::memcache_router::Breakdown* cache_hit_;
  ::memcache_router::Breakdown* cache_miss_;
  bool touch_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_memdata_2eproto();
  friend void protobuf_AssignDesc_memdata_2eproto();
  friend void protobuf_ShutdownFile_memdata_2eproto();

  void InitAsDefaultInstance();
  static Stats* default_instance_;
};
// -------------------------------------------------------------------

class Instruction : public ::google::protobuf::Message {
 public:
  Instruction();
  virtual ~Instruction();

  Instruction(const Instruction& from);

  inline Instruction& operator=(const Instruction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Instruction& default_instance();

  void Swap(Instruction* other);

  // implements Message ----------------------------------------------

  Instruction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Instruction& from);
  void MergeFrom(const Instruction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .memcache_router.KeyValue get_keys = 1;
  inline int get_keys_size() const;
  inline void clear_get_keys();
  static const int kGetKeysFieldNumber = 1;
  inline const ::memcache_router::KeyValue& get_keys(int index) const;
  inline ::memcache_router::KeyValue* mutable_get_keys(int index);
  inline ::memcache_router::KeyValue* add_get_keys();
  inline const ::google::protobuf::RepeatedPtrField< ::memcache_router::KeyValue >&
      get_keys() const;
  inline ::google::protobuf::RepeatedPtrField< ::memcache_router::KeyValue >*
      mutable_get_keys();

  // repeated .memcache_router.KeyValue set_keys = 2;
  inline int set_keys_size() const;
  inline void clear_set_keys();
  static const int kSetKeysFieldNumber = 2;
  inline const ::memcache_router::KeyValue& set_keys(int index) const;
  inline ::memcache_router::KeyValue* mutable_set_keys(int index);
  inline ::memcache_router::KeyValue* add_set_keys();
  inline const ::google::protobuf::RepeatedPtrField< ::memcache_router::KeyValue >&
      set_keys() const;
  inline ::google::protobuf::RepeatedPtrField< ::memcache_router::KeyValue >*
      mutable_set_keys();

  // repeated .memcache_router.KeyValue incr_keys = 3;
  inline int incr_keys_size() const;
  inline void clear_incr_keys();
  static const int kIncrKeysFieldNumber = 3;
  inline const ::memcache_router::KeyValue& incr_keys(int index) const;
  inline ::memcache_router::KeyValue* mutable_incr_keys(int index);
  inline ::memcache_router::KeyValue* add_incr_keys();
  inline const ::google::protobuf::RepeatedPtrField< ::memcache_router::KeyValue >&
      incr_keys() const;
  inline ::google::protobuf::RepeatedPtrField< ::memcache_router::KeyValue >*
      mutable_incr_keys();

  // repeated .memcache_router.Server servers = 4;
  inline int servers_size() const;
  inline void clear_servers();
  static const int kServersFieldNumber = 4;
  inline const ::memcache_router::Server& servers(int index) const;
  inline ::memcache_router::Server* mutable_servers(int index);
  inline ::memcache_router::Server* add_servers();
  inline const ::google::protobuf::RepeatedPtrField< ::memcache_router::Server >&
      servers() const;
  inline ::google::protobuf::RepeatedPtrField< ::memcache_router::Server >*
      mutable_servers();

  // optional .memcache_router.Stats stats = 5;
  inline bool has_stats() const;
  inline void clear_stats();
  static const int kStatsFieldNumber = 5;
  inline const ::memcache_router::Stats& stats() const;
  inline ::memcache_router::Stats* mutable_stats();
  inline ::memcache_router::Stats* release_stats();
  inline void set_allocated_stats(::memcache_router::Stats* stats);

  // @@protoc_insertion_point(class_scope:memcache_router.Instruction)
 private:
  inline void set_has_stats();
  inline void clear_has_stats();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::memcache_router::KeyValue > get_keys_;
  ::google::protobuf::RepeatedPtrField< ::memcache_router::KeyValue > set_keys_;
  ::google::protobuf::RepeatedPtrField< ::memcache_router::KeyValue > incr_keys_;
  ::google::protobuf::RepeatedPtrField< ::memcache_router::Server > servers_;
  ::memcache_router::Stats* stats_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_memdata_2eproto();
  friend void protobuf_AssignDesc_memdata_2eproto();
  friend void protobuf_ShutdownFile_memdata_2eproto();

  void InitAsDefaultInstance();
  static Instruction* default_instance_;
};
// ===================================================================


// ===================================================================

// KeyValue

// optional string key = 1;
inline bool KeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyValue::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& KeyValue::key() const {
  return *key_;
}
inline void KeyValue::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void KeyValue::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void KeyValue::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyValue::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* KeyValue::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeyValue::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes val = 2;
inline bool KeyValue::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyValue::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeyValue::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeyValue::clear_val() {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    val_->clear();
  }
  clear_has_val();
}
inline const ::std::string& KeyValue::val() const {
  return *val_;
}
inline void KeyValue::set_val(const ::std::string& value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void KeyValue::set_val(const char* value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void KeyValue::set_val(const void* value, size_t size) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyValue::mutable_val() {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  return val_;
}
inline ::std::string* KeyValue::release_val() {
  clear_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = val_;
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeyValue::set_allocated_val(::std::string* val) {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    delete val_;
  }
  if (val) {
    set_has_val();
    val_ = val;
  } else {
    clear_has_val();
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 flags = 3;
inline bool KeyValue::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KeyValue::set_has_flags() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KeyValue::clear_has_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KeyValue::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 KeyValue::flags() const {
  return flags_;
}
inline void KeyValue::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
}

// optional uint64 expire_in_seconds = 4 [default = 0];
inline bool KeyValue::has_expire_in_seconds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KeyValue::set_has_expire_in_seconds() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KeyValue::clear_has_expire_in_seconds() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KeyValue::clear_expire_in_seconds() {
  expire_in_seconds_ = GOOGLE_ULONGLONG(0);
  clear_has_expire_in_seconds();
}
inline ::google::protobuf::uint64 KeyValue::expire_in_seconds() const {
  return expire_in_seconds_;
}
inline void KeyValue::set_expire_in_seconds(::google::protobuf::uint64 value) {
  set_has_expire_in_seconds();
  expire_in_seconds_ = value;
}

// optional uint64 cas = 5 [default = 0];
inline bool KeyValue::has_cas() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KeyValue::set_has_cas() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KeyValue::clear_has_cas() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KeyValue::clear_cas() {
  cas_ = GOOGLE_ULONGLONG(0);
  clear_has_cas();
}
inline ::google::protobuf::uint64 KeyValue::cas() const {
  return cas_;
}
inline void KeyValue::set_cas(::google::protobuf::uint64 value) {
  set_has_cas();
  cas_ = value;
}

// optional bool allow_replace = 6 [default = true];
inline bool KeyValue::has_allow_replace() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KeyValue::set_has_allow_replace() {
  _has_bits_[0] |= 0x00000020u;
}
inline void KeyValue::clear_has_allow_replace() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void KeyValue::clear_allow_replace() {
  allow_replace_ = true;
  clear_has_allow_replace();
}
inline bool KeyValue::allow_replace() const {
  return allow_replace_;
}
inline void KeyValue::set_allow_replace(bool value) {
  set_has_allow_replace();
  allow_replace_ = value;
}

// optional uint64 default_counter_val = 7 [default = 0];
inline bool KeyValue::has_default_counter_val() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void KeyValue::set_has_default_counter_val() {
  _has_bits_[0] |= 0x00000040u;
}
inline void KeyValue::clear_has_default_counter_val() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void KeyValue::clear_default_counter_val() {
  default_counter_val_ = GOOGLE_ULONGLONG(0);
  clear_has_default_counter_val();
}
inline ::google::protobuf::uint64 KeyValue::default_counter_val() const {
  return default_counter_val_;
}
inline void KeyValue::set_default_counter_val(::google::protobuf::uint64 value) {
  set_has_default_counter_val();
  default_counter_val_ = value;
}

// optional int32 offset = 8 [default = 0];
inline bool KeyValue::has_offset() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void KeyValue::set_has_offset() {
  _has_bits_[0] |= 0x00000080u;
}
inline void KeyValue::clear_has_offset() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void KeyValue::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 KeyValue::offset() const {
  return offset_;
}
inline void KeyValue::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// optional uint64 counter_val = 9;
inline bool KeyValue::has_counter_val() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void KeyValue::set_has_counter_val() {
  _has_bits_[0] |= 0x00000100u;
}
inline void KeyValue::clear_has_counter_val() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void KeyValue::clear_counter_val() {
  counter_val_ = GOOGLE_ULONGLONG(0);
  clear_has_counter_val();
}
inline ::google::protobuf::uint64 KeyValue::counter_val() const {
  return counter_val_;
}
inline void KeyValue::set_counter_val(::google::protobuf::uint64 value) {
  set_has_counter_val();
  counter_val_ = value;
}

// optional int32 server_index = 10;
inline bool KeyValue::has_server_index() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void KeyValue::set_has_server_index() {
  _has_bits_[0] |= 0x00000200u;
}
inline void KeyValue::clear_has_server_index() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void KeyValue::clear_server_index() {
  server_index_ = 0;
  clear_has_server_index();
}
inline ::google::protobuf::int32 KeyValue::server_index() const {
  return server_index_;
}
inline void KeyValue::set_server_index(::google::protobuf::int32 value) {
  set_has_server_index();
  server_index_ = value;
}

// optional bool no_propagate = 11 [default = false];
inline bool KeyValue::has_no_propagate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void KeyValue::set_has_no_propagate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void KeyValue::clear_has_no_propagate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void KeyValue::clear_no_propagate() {
  no_propagate_ = false;
  clear_has_no_propagate();
}
inline bool KeyValue::no_propagate() const {
  return no_propagate_;
}
inline void KeyValue::set_no_propagate(bool value) {
  set_has_no_propagate();
  no_propagate_ = value;
}

// optional int32 return_code = 14 [default = 0];
inline bool KeyValue::has_return_code() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void KeyValue::set_has_return_code() {
  _has_bits_[0] |= 0x00000800u;
}
inline void KeyValue::clear_has_return_code() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void KeyValue::clear_return_code() {
  return_code_ = 0;
  clear_has_return_code();
}
inline ::google::protobuf::int32 KeyValue::return_code() const {
  return return_code_;
}
inline void KeyValue::set_return_code(::google::protobuf::int32 value) {
  set_has_return_code();
  return_code_ = value;
}

// optional string return_error = 15;
inline bool KeyValue::has_return_error() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void KeyValue::set_has_return_error() {
  _has_bits_[0] |= 0x00001000u;
}
inline void KeyValue::clear_has_return_error() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void KeyValue::clear_return_error() {
  if (return_error_ != &::google::protobuf::internal::kEmptyString) {
    return_error_->clear();
  }
  clear_has_return_error();
}
inline const ::std::string& KeyValue::return_error() const {
  return *return_error_;
}
inline void KeyValue::set_return_error(const ::std::string& value) {
  set_has_return_error();
  if (return_error_ == &::google::protobuf::internal::kEmptyString) {
    return_error_ = new ::std::string;
  }
  return_error_->assign(value);
}
inline void KeyValue::set_return_error(const char* value) {
  set_has_return_error();
  if (return_error_ == &::google::protobuf::internal::kEmptyString) {
    return_error_ = new ::std::string;
  }
  return_error_->assign(value);
}
inline void KeyValue::set_return_error(const char* value, size_t size) {
  set_has_return_error();
  if (return_error_ == &::google::protobuf::internal::kEmptyString) {
    return_error_ = new ::std::string;
  }
  return_error_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyValue::mutable_return_error() {
  set_has_return_error();
  if (return_error_ == &::google::protobuf::internal::kEmptyString) {
    return_error_ = new ::std::string;
  }
  return return_error_;
}
inline ::std::string* KeyValue::release_return_error() {
  clear_has_return_error();
  if (return_error_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = return_error_;
    return_error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeyValue::set_allocated_return_error(::std::string* return_error) {
  if (return_error_ != &::google::protobuf::internal::kEmptyString) {
    delete return_error_;
  }
  if (return_error) {
    set_has_return_error();
    return_error_ = return_error;
  } else {
    clear_has_return_error();
    return_error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Server

// optional string hostname = 1;
inline bool Server::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Server::set_has_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Server::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Server::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& Server::hostname() const {
  return *hostname_;
}
inline void Server::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void Server::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void Server::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Server::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* Server::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Server::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 2;
inline bool Server::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Server::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Server::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Server::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Server::port() const {
  return port_;
}
inline void Server::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// Breakdown

// optional double average = 1;
inline bool Breakdown::has_average() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Breakdown::set_has_average() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Breakdown::clear_has_average() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Breakdown::clear_average() {
  average_ = 0;
  clear_has_average();
}
inline double Breakdown::average() const {
  return average_;
}
inline void Breakdown::set_average(double value) {
  set_has_average();
  average_ = value;
}

// optional uint64 count = 2;
inline bool Breakdown::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Breakdown::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Breakdown::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Breakdown::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
  clear_has_count();
}
inline ::google::protobuf::uint64 Breakdown::count() const {
  return count_;
}
inline void Breakdown::set_count(::google::protobuf::uint64 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// Stats

// optional .memcache_router.Breakdown push_latency = 1;
inline bool Stats::has_push_latency() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stats::set_has_push_latency() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stats::clear_has_push_latency() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stats::clear_push_latency() {
  if (push_latency_ != NULL) push_latency_->::memcache_router::Breakdown::Clear();
  clear_has_push_latency();
}
inline const ::memcache_router::Breakdown& Stats::push_latency() const {
  return push_latency_ != NULL ? *push_latency_ : *default_instance_->push_latency_;
}
inline ::memcache_router::Breakdown* Stats::mutable_push_latency() {
  set_has_push_latency();
  if (push_latency_ == NULL) push_latency_ = new ::memcache_router::Breakdown;
  return push_latency_;
}
inline ::memcache_router::Breakdown* Stats::release_push_latency() {
  clear_has_push_latency();
  ::memcache_router::Breakdown* temp = push_latency_;
  push_latency_ = NULL;
  return temp;
}
inline void Stats::set_allocated_push_latency(::memcache_router::Breakdown* push_latency) {
  delete push_latency_;
  push_latency_ = push_latency;
  if (push_latency) {
    set_has_push_latency();
  } else {
    clear_has_push_latency();
  }
}

// optional .memcache_router.Breakdown pop_latency = 2;
inline bool Stats::has_pop_latency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stats::set_has_pop_latency() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stats::clear_has_pop_latency() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stats::clear_pop_latency() {
  if (pop_latency_ != NULL) pop_latency_->::memcache_router::Breakdown::Clear();
  clear_has_pop_latency();
}
inline const ::memcache_router::Breakdown& Stats::pop_latency() const {
  return pop_latency_ != NULL ? *pop_latency_ : *default_instance_->pop_latency_;
}
inline ::memcache_router::Breakdown* Stats::mutable_pop_latency() {
  set_has_pop_latency();
  if (pop_latency_ == NULL) pop_latency_ = new ::memcache_router::Breakdown;
  return pop_latency_;
}
inline ::memcache_router::Breakdown* Stats::release_pop_latency() {
  clear_has_pop_latency();
  ::memcache_router::Breakdown* temp = pop_latency_;
  pop_latency_ = NULL;
  return temp;
}
inline void Stats::set_allocated_pop_latency(::memcache_router::Breakdown* pop_latency) {
  delete pop_latency_;
  pop_latency_ = pop_latency;
  if (pop_latency) {
    set_has_pop_latency();
  } else {
    clear_has_pop_latency();
  }
}

// optional .memcache_router.Breakdown batch_size = 3;
inline bool Stats::has_batch_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Stats::set_has_batch_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Stats::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Stats::clear_batch_size() {
  if (batch_size_ != NULL) batch_size_->::memcache_router::Breakdown::Clear();
  clear_has_batch_size();
}
inline const ::memcache_router::Breakdown& Stats::batch_size() const {
  return batch_size_ != NULL ? *batch_size_ : *default_instance_->batch_size_;
}
inline ::memcache_router::Breakdown* Stats::mutable_batch_size() {
  set_has_batch_size();
  if (batch_size_ == NULL) batch_size_ = new ::memcache_router::Breakdown;
  return batch_size_;
}
inline ::memcache_router::Breakdown* Stats::release_batch_size() {
  clear_has_batch_size();
  ::memcache_router::Breakdown* temp = batch_size_;
  batch_size_ = NULL;
  return temp;
}
inline void Stats::set_allocated_batch_size(::memcache_router::Breakdown* batch_size) {
  delete batch_size_;
  batch_size_ = batch_size;
  if (batch_size) {
    set_has_batch_size();
  } else {
    clear_has_batch_size();
  }
}

// optional .memcache_router.Breakdown loop_latency = 4;
inline bool Stats::has_loop_latency() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Stats::set_has_loop_latency() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Stats::clear_has_loop_latency() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Stats::clear_loop_latency() {
  if (loop_latency_ != NULL) loop_latency_->::memcache_router::Breakdown::Clear();
  clear_has_loop_latency();
}
inline const ::memcache_router::Breakdown& Stats::loop_latency() const {
  return loop_latency_ != NULL ? *loop_latency_ : *default_instance_->loop_latency_;
}
inline ::memcache_router::Breakdown* Stats::mutable_loop_latency() {
  set_has_loop_latency();
  if (loop_latency_ == NULL) loop_latency_ = new ::memcache_router::Breakdown;
  return loop_latency_;
}
inline ::memcache_router::Breakdown* Stats::release_loop_latency() {
  clear_has_loop_latency();
  ::memcache_router::Breakdown* temp = loop_latency_;
  loop_latency_ = NULL;
  return temp;
}
inline void Stats::set_allocated_loop_latency(::memcache_router::Breakdown* loop_latency) {
  delete loop_latency_;
  loop_latency_ = loop_latency;
  if (loop_latency) {
    set_has_loop_latency();
  } else {
    clear_has_loop_latency();
  }
}

// optional .memcache_router.Breakdown packet_latency = 5;
inline bool Stats::has_packet_latency() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Stats::set_has_packet_latency() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Stats::clear_has_packet_latency() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Stats::clear_packet_latency() {
  if (packet_latency_ != NULL) packet_latency_->::memcache_router::Breakdown::Clear();
  clear_has_packet_latency();
}
inline const ::memcache_router::Breakdown& Stats::packet_latency() const {
  return packet_latency_ != NULL ? *packet_latency_ : *default_instance_->packet_latency_;
}
inline ::memcache_router::Breakdown* Stats::mutable_packet_latency() {
  set_has_packet_latency();
  if (packet_latency_ == NULL) packet_latency_ = new ::memcache_router::Breakdown;
  return packet_latency_;
}
inline ::memcache_router::Breakdown* Stats::release_packet_latency() {
  clear_has_packet_latency();
  ::memcache_router::Breakdown* temp = packet_latency_;
  packet_latency_ = NULL;
  return temp;
}
inline void Stats::set_allocated_packet_latency(::memcache_router::Breakdown* packet_latency) {
  delete packet_latency_;
  packet_latency_ = packet_latency;
  if (packet_latency) {
    set_has_packet_latency();
  } else {
    clear_has_packet_latency();
  }
}

// optional .memcache_router.Breakdown cache_hit = 6;
inline bool Stats::has_cache_hit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Stats::set_has_cache_hit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Stats::clear_has_cache_hit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Stats::clear_cache_hit() {
  if (cache_hit_ != NULL) cache_hit_->::memcache_router::Breakdown::Clear();
  clear_has_cache_hit();
}
inline const ::memcache_router::Breakdown& Stats::cache_hit() const {
  return cache_hit_ != NULL ? *cache_hit_ : *default_instance_->cache_hit_;
}
inline ::memcache_router::Breakdown* Stats::mutable_cache_hit() {
  set_has_cache_hit();
  if (cache_hit_ == NULL) cache_hit_ = new ::memcache_router::Breakdown;
  return cache_hit_;
}
inline ::memcache_router::Breakdown* Stats::release_cache_hit() {
  clear_has_cache_hit();
  ::memcache_router::Breakdown* temp = cache_hit_;
  cache_hit_ = NULL;
  return temp;
}
inline void Stats::set_allocated_cache_hit(::memcache_router::Breakdown* cache_hit) {
  delete cache_hit_;
  cache_hit_ = cache_hit;
  if (cache_hit) {
    set_has_cache_hit();
  } else {
    clear_has_cache_hit();
  }
}

// optional .memcache_router.Breakdown cache_miss = 7;
inline bool Stats::has_cache_miss() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Stats::set_has_cache_miss() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Stats::clear_has_cache_miss() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Stats::clear_cache_miss() {
  if (cache_miss_ != NULL) cache_miss_->::memcache_router::Breakdown::Clear();
  clear_has_cache_miss();
}
inline const ::memcache_router::Breakdown& Stats::cache_miss() const {
  return cache_miss_ != NULL ? *cache_miss_ : *default_instance_->cache_miss_;
}
inline ::memcache_router::Breakdown* Stats::mutable_cache_miss() {
  set_has_cache_miss();
  if (cache_miss_ == NULL) cache_miss_ = new ::memcache_router::Breakdown;
  return cache_miss_;
}
inline ::memcache_router::Breakdown* Stats::release_cache_miss() {
  clear_has_cache_miss();
  ::memcache_router::Breakdown* temp = cache_miss_;
  cache_miss_ = NULL;
  return temp;
}
inline void Stats::set_allocated_cache_miss(::memcache_router::Breakdown* cache_miss) {
  delete cache_miss_;
  cache_miss_ = cache_miss;
  if (cache_miss) {
    set_has_cache_miss();
  } else {
    clear_has_cache_miss();
  }
}

// optional bool touch = 100;
inline bool Stats::has_touch() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Stats::set_has_touch() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Stats::clear_has_touch() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Stats::clear_touch() {
  touch_ = false;
  clear_has_touch();
}
inline bool Stats::touch() const {
  return touch_;
}
inline void Stats::set_touch(bool value) {
  set_has_touch();
  touch_ = value;
}

// -------------------------------------------------------------------

// Instruction

// repeated .memcache_router.KeyValue get_keys = 1;
inline int Instruction::get_keys_size() const {
  return get_keys_.size();
}
inline void Instruction::clear_get_keys() {
  get_keys_.Clear();
}
inline const ::memcache_router::KeyValue& Instruction::get_keys(int index) const {
  return get_keys_.Get(index);
}
inline ::memcache_router::KeyValue* Instruction::mutable_get_keys(int index) {
  return get_keys_.Mutable(index);
}
inline ::memcache_router::KeyValue* Instruction::add_get_keys() {
  return get_keys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::memcache_router::KeyValue >&
Instruction::get_keys() const {
  return get_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::memcache_router::KeyValue >*
Instruction::mutable_get_keys() {
  return &get_keys_;
}

// repeated .memcache_router.KeyValue set_keys = 2;
inline int Instruction::set_keys_size() const {
  return set_keys_.size();
}
inline void Instruction::clear_set_keys() {
  set_keys_.Clear();
}
inline const ::memcache_router::KeyValue& Instruction::set_keys(int index) const {
  return set_keys_.Get(index);
}
inline ::memcache_router::KeyValue* Instruction::mutable_set_keys(int index) {
  return set_keys_.Mutable(index);
}
inline ::memcache_router::KeyValue* Instruction::add_set_keys() {
  return set_keys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::memcache_router::KeyValue >&
Instruction::set_keys() const {
  return set_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::memcache_router::KeyValue >*
Instruction::mutable_set_keys() {
  return &set_keys_;
}

// repeated .memcache_router.KeyValue incr_keys = 3;
inline int Instruction::incr_keys_size() const {
  return incr_keys_.size();
}
inline void Instruction::clear_incr_keys() {
  incr_keys_.Clear();
}
inline const ::memcache_router::KeyValue& Instruction::incr_keys(int index) const {
  return incr_keys_.Get(index);
}
inline ::memcache_router::KeyValue* Instruction::mutable_incr_keys(int index) {
  return incr_keys_.Mutable(index);
}
inline ::memcache_router::KeyValue* Instruction::add_incr_keys() {
  return incr_keys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::memcache_router::KeyValue >&
Instruction::incr_keys() const {
  return incr_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::memcache_router::KeyValue >*
Instruction::mutable_incr_keys() {
  return &incr_keys_;
}

// repeated .memcache_router.Server servers = 4;
inline int Instruction::servers_size() const {
  return servers_.size();
}
inline void Instruction::clear_servers() {
  servers_.Clear();
}
inline const ::memcache_router::Server& Instruction::servers(int index) const {
  return servers_.Get(index);
}
inline ::memcache_router::Server* Instruction::mutable_servers(int index) {
  return servers_.Mutable(index);
}
inline ::memcache_router::Server* Instruction::add_servers() {
  return servers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::memcache_router::Server >&
Instruction::servers() const {
  return servers_;
}
inline ::google::protobuf::RepeatedPtrField< ::memcache_router::Server >*
Instruction::mutable_servers() {
  return &servers_;
}

// optional .memcache_router.Stats stats = 5;
inline bool Instruction::has_stats() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Instruction::set_has_stats() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Instruction::clear_has_stats() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Instruction::clear_stats() {
  if (stats_ != NULL) stats_->::memcache_router::Stats::Clear();
  clear_has_stats();
}
inline const ::memcache_router::Stats& Instruction::stats() const {
  return stats_ != NULL ? *stats_ : *default_instance_->stats_;
}
inline ::memcache_router::Stats* Instruction::mutable_stats() {
  set_has_stats();
  if (stats_ == NULL) stats_ = new ::memcache_router::Stats;
  return stats_;
}
inline ::memcache_router::Stats* Instruction::release_stats() {
  clear_has_stats();
  ::memcache_router::Stats* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline void Instruction::set_allocated_stats(::memcache_router::Stats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    set_has_stats();
  } else {
    clear_has_stats();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace memcache_router

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_memdata_2eproto__INCLUDED
