// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: memdata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "memdata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace memcache_router {

namespace {

const ::google::protobuf::Descriptor* KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Server_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Server_reflection_ = NULL;
const ::google::protobuf::Descriptor* Breakdown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Breakdown_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stats_reflection_ = NULL;
const ::google::protobuf::Descriptor* Instruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Instruction_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_memdata_2eproto() {
  protobuf_AddDesc_memdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "memdata.proto");
  GOOGLE_CHECK(file != NULL);
  KeyValue_descriptor_ = file->message_type(0);
  static const int KeyValue_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, expire_in_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, cas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, allow_replace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, default_counter_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, counter_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, server_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, no_propagate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, return_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, return_error_),
  };
  KeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValue_descriptor_,
      KeyValue::default_instance_,
      KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValue));
  Server_descriptor_ = file->message_type(1);
  static const int Server_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, port_),
  };
  Server_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Server_descriptor_,
      Server::default_instance_,
      Server_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Server));
  Breakdown_descriptor_ = file->message_type(2);
  static const int Breakdown_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Breakdown, average_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Breakdown, count_),
  };
  Breakdown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Breakdown_descriptor_,
      Breakdown::default_instance_,
      Breakdown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Breakdown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Breakdown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Breakdown));
  Stats_descriptor_ = file->message_type(3);
  static const int Stats_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, push_latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, pop_latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, loop_latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, packet_latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, cache_hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, cache_miss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, touch_),
  };
  Stats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stats_descriptor_,
      Stats::default_instance_,
      Stats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stats));
  Instruction_descriptor_ = file->message_type(4);
  static const int Instruction_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, get_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, set_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, incr_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, servers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, stats_),
  };
  Instruction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Instruction_descriptor_,
      Instruction::default_instance_,
      Instruction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Instruction));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_memdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValue_descriptor_, &KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Server_descriptor_, &Server::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Breakdown_descriptor_, &Breakdown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stats_descriptor_, &Stats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Instruction_descriptor_, &Instruction::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_memdata_2eproto() {
  delete KeyValue::default_instance_;
  delete KeyValue_reflection_;
  delete Server::default_instance_;
  delete Server_reflection_;
  delete Breakdown::default_instance_;
  delete Breakdown_reflection_;
  delete Stats::default_instance_;
  delete Stats_reflection_;
  delete Instruction::default_instance_;
  delete Instruction_reflection_;
}

void protobuf_AddDesc_memdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmemdata.proto\022\017memcache_router\"\247\002\n\010Key"
    "Value\022\013\n\003key\030\001 \001(\t\022\013\n\003val\030\002 \001(\014\022\r\n\005flags"
    "\030\003 \001(\r\022\034\n\021expire_in_seconds\030\004 \001(\004:\0010\022\016\n\003"
    "cas\030\005 \001(\004:\0010\022\033\n\rallow_replace\030\006 \001(\010:\004tru"
    "e\022\036\n\023default_counter_val\030\007 \001(\004:\0010\022\021\n\006off"
    "set\030\010 \001(\005:\0010\022\023\n\013counter_val\030\t \001(\004\022\024\n\014ser"
    "ver_index\030\n \001(\005\022\033\n\014no_propagate\030\013 \001(\010:\005f"
    "alse\022\026\n\013return_code\030\016 \001(\005:\0010\022\024\n\014return_e"
    "rror\030\017 \001(\t\"(\n\006Server\022\020\n\010hostname\030\001 \001(\t\022\014"
    "\n\004port\030\002 \001(\005\"+\n\tBreakdown\022\017\n\007average\030\001 \001"
    "(\001\022\r\n\005count\030\002 \001(\004\"\356\002\n\005Stats\0220\n\014push_late"
    "ncy\030\001 \001(\0132\032.memcache_router.Breakdown\022/\n"
    "\013pop_latency\030\002 \001(\0132\032.memcache_router.Bre"
    "akdown\022.\n\nbatch_size\030\003 \001(\0132\032.memcache_ro"
    "uter.Breakdown\0220\n\014loop_latency\030\004 \001(\0132\032.m"
    "emcache_router.Breakdown\0222\n\016packet_laten"
    "cy\030\005 \001(\0132\032.memcache_router.Breakdown\022-\n\t"
    "cache_hit\030\006 \001(\0132\032.memcache_router.Breakd"
    "own\022.\n\ncache_miss\030\007 \001(\0132\032.memcache_route"
    "r.Breakdown\022\r\n\005touch\030d \001(\010\"\346\001\n\013Instructi"
    "on\022+\n\010get_keys\030\001 \003(\0132\031.memcache_router.K"
    "eyValue\022+\n\010set_keys\030\002 \003(\0132\031.memcache_rou"
    "ter.KeyValue\022,\n\tincr_keys\030\003 \003(\0132\031.memcac"
    "he_router.KeyValue\022(\n\007servers\030\004 \003(\0132\027.me"
    "mcache_router.Server\022%\n\005stats\030\005 \001(\0132\026.me"
    "mcache_router.Stats", 1019);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "memdata.proto", &protobuf_RegisterTypes);
  KeyValue::default_instance_ = new KeyValue();
  Server::default_instance_ = new Server();
  Breakdown::default_instance_ = new Breakdown();
  Stats::default_instance_ = new Stats();
  Instruction::default_instance_ = new Instruction();
  KeyValue::default_instance_->InitAsDefaultInstance();
  Server::default_instance_->InitAsDefaultInstance();
  Breakdown::default_instance_->InitAsDefaultInstance();
  Stats::default_instance_->InitAsDefaultInstance();
  Instruction::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_memdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_memdata_2eproto {
  StaticDescriptorInitializer_memdata_2eproto() {
    protobuf_AddDesc_memdata_2eproto();
  }
} static_descriptor_initializer_memdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kValFieldNumber;
const int KeyValue::kFlagsFieldNumber;
const int KeyValue::kExpireInSecondsFieldNumber;
const int KeyValue::kCasFieldNumber;
const int KeyValue::kAllowReplaceFieldNumber;
const int KeyValue::kDefaultCounterValFieldNumber;
const int KeyValue::kOffsetFieldNumber;
const int KeyValue::kCounterValFieldNumber;
const int KeyValue::kServerIndexFieldNumber;
const int KeyValue::kNoPropagateFieldNumber;
const int KeyValue::kReturnCodeFieldNumber;
const int KeyValue::kReturnErrorFieldNumber;
#endif  // !_MSC_VER

KeyValue::KeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeyValue::InitAsDefaultInstance() {
}

KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flags_ = 0u;
  expire_in_seconds_ = GOOGLE_ULONGLONG(0);
  cas_ = GOOGLE_ULONGLONG(0);
  allow_replace_ = true;
  default_counter_val_ = GOOGLE_ULONGLONG(0);
  offset_ = 0;
  counter_val_ = GOOGLE_ULONGLONG(0);
  server_index_ = 0;
  no_propagate_ = false;
  return_code_ = 0;
  return_error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValue::~KeyValue() {
  SharedDtor();
}

void KeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    delete val_;
  }
  if (return_error_ != &::google::protobuf::internal::kEmptyString) {
    delete return_error_;
  }
  if (this != default_instance_) {
  }
}

void KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValue_descriptor_;
}

const KeyValue& KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_memdata_2eproto();
  return *default_instance_;
}

KeyValue* KeyValue::default_instance_ = NULL;

KeyValue* KeyValue::New() const {
  return new KeyValue;
}

void KeyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_val()) {
      if (val_ != &::google::protobuf::internal::kEmptyString) {
        val_->clear();
      }
    }
    flags_ = 0u;
    expire_in_seconds_ = GOOGLE_ULONGLONG(0);
    cas_ = GOOGLE_ULONGLONG(0);
    allow_replace_ = true;
    default_counter_val_ = GOOGLE_ULONGLONG(0);
    offset_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    counter_val_ = GOOGLE_ULONGLONG(0);
    server_index_ = 0;
    no_propagate_ = false;
    return_code_ = 0;
    if (has_return_error()) {
      if (return_error_ != &::google::protobuf::internal::kEmptyString) {
        return_error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_val;
        break;
      }

      // optional bytes val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_val()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_expire_in_seconds;
        break;
      }

      // optional uint64 expire_in_seconds = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_in_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expire_in_seconds_)));
          set_has_expire_in_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cas;
        break;
      }

      // optional uint64 cas = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cas_)));
          set_has_cas();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_allow_replace;
        break;
      }

      // optional bool allow_replace = 6 [default = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow_replace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_replace_)));
          set_has_allow_replace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_default_counter_val;
        break;
      }

      // optional uint64 default_counter_val = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_counter_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &default_counter_val_)));
          set_has_default_counter_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_offset;
        break;
      }

      // optional int32 offset = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_counter_val;
        break;
      }

      // optional uint64 counter_val = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counter_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &counter_val_)));
          set_has_counter_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_server_index;
        break;
      }

      // optional int32 server_index = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_index_)));
          set_has_server_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_no_propagate;
        break;
      }

      // optional bool no_propagate = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_no_propagate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_propagate_)));
          set_has_no_propagate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_return_code;
        break;
      }

      // optional int32 return_code = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_return_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &return_code_)));
          set_has_return_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_return_error;
        break;
      }

      // optional string return_error = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_return_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_return_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->return_error().data(), this->return_error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional bytes val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->val(), output);
  }

  // optional uint32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // optional uint64 expire_in_seconds = 4 [default = 0];
  if (has_expire_in_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->expire_in_seconds(), output);
  }

  // optional uint64 cas = 5 [default = 0];
  if (has_cas()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->cas(), output);
  }

  // optional bool allow_replace = 6 [default = true];
  if (has_allow_replace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->allow_replace(), output);
  }

  // optional uint64 default_counter_val = 7 [default = 0];
  if (has_default_counter_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->default_counter_val(), output);
  }

  // optional int32 offset = 8 [default = 0];
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->offset(), output);
  }

  // optional uint64 counter_val = 9;
  if (has_counter_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->counter_val(), output);
  }

  // optional int32 server_index = 10;
  if (has_server_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->server_index(), output);
  }

  // optional bool no_propagate = 11 [default = false];
  if (has_no_propagate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->no_propagate(), output);
  }

  // optional int32 return_code = 14 [default = 0];
  if (has_return_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->return_code(), output);
  }

  // optional string return_error = 15;
  if (has_return_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->return_error().data(), this->return_error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->return_error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional bytes val = 2;
  if (has_val()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->val(), target);
  }

  // optional uint32 flags = 3;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  // optional uint64 expire_in_seconds = 4 [default = 0];
  if (has_expire_in_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->expire_in_seconds(), target);
  }

  // optional uint64 cas = 5 [default = 0];
  if (has_cas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->cas(), target);
  }

  // optional bool allow_replace = 6 [default = true];
  if (has_allow_replace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->allow_replace(), target);
  }

  // optional uint64 default_counter_val = 7 [default = 0];
  if (has_default_counter_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->default_counter_val(), target);
  }

  // optional int32 offset = 8 [default = 0];
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->offset(), target);
  }

  // optional uint64 counter_val = 9;
  if (has_counter_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->counter_val(), target);
  }

  // optional int32 server_index = 10;
  if (has_server_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->server_index(), target);
  }

  // optional bool no_propagate = 11 [default = false];
  if (has_no_propagate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->no_propagate(), target);
  }

  // optional int32 return_code = 14 [default = 0];
  if (has_return_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->return_code(), target);
  }

  // optional string return_error = 15;
  if (has_return_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->return_error().data(), this->return_error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->return_error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional bytes val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->val());
    }

    // optional uint32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint64 expire_in_seconds = 4 [default = 0];
    if (has_expire_in_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expire_in_seconds());
    }

    // optional uint64 cas = 5 [default = 0];
    if (has_cas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cas());
    }

    // optional bool allow_replace = 6 [default = true];
    if (has_allow_replace()) {
      total_size += 1 + 1;
    }

    // optional uint64 default_counter_val = 7 [default = 0];
    if (has_default_counter_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->default_counter_val());
    }

    // optional int32 offset = 8 [default = 0];
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 counter_val = 9;
    if (has_counter_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->counter_val());
    }

    // optional int32 server_index = 10;
    if (has_server_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_index());
    }

    // optional bool no_propagate = 11 [default = false];
    if (has_no_propagate()) {
      total_size += 1 + 1;
    }

    // optional int32 return_code = 14 [default = 0];
    if (has_return_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->return_code());
    }

    // optional string return_error = 15;
    if (has_return_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->return_error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_expire_in_seconds()) {
      set_expire_in_seconds(from.expire_in_seconds());
    }
    if (from.has_cas()) {
      set_cas(from.cas());
    }
    if (from.has_allow_replace()) {
      set_allow_replace(from.allow_replace());
    }
    if (from.has_default_counter_val()) {
      set_default_counter_val(from.default_counter_val());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_counter_val()) {
      set_counter_val(from.counter_val());
    }
    if (from.has_server_index()) {
      set_server_index(from.server_index());
    }
    if (from.has_no_propagate()) {
      set_no_propagate(from.no_propagate());
    }
    if (from.has_return_code()) {
      set_return_code(from.return_code());
    }
    if (from.has_return_error()) {
      set_return_error(from.return_error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {

  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(val_, other->val_);
    std::swap(flags_, other->flags_);
    std::swap(expire_in_seconds_, other->expire_in_seconds_);
    std::swap(cas_, other->cas_);
    std::swap(allow_replace_, other->allow_replace_);
    std::swap(default_counter_val_, other->default_counter_val_);
    std::swap(offset_, other->offset_);
    std::swap(counter_val_, other->counter_val_);
    std::swap(server_index_, other->server_index_);
    std::swap(no_propagate_, other->no_propagate_);
    std::swap(return_code_, other->return_code_);
    std::swap(return_error_, other->return_error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValue_descriptor_;
  metadata.reflection = KeyValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Server::kHostnameFieldNumber;
const int Server::kPortFieldNumber;
#endif  // !_MSC_VER

Server::Server()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Server::InitAsDefaultInstance() {
}

Server::Server(const Server& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Server::SharedCtor() {
  _cached_size_ = 0;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Server::~Server() {
  SharedDtor();
}

void Server::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Server_descriptor_;
}

const Server& Server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_memdata_2eproto();
  return *default_instance_;
}

Server* Server::default_instance_ = NULL;

Server* Server::New() const {
  return new Server;
}

void Server::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hostname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hostname(), output);
  }

  // optional int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Server::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // optional int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Server::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string hostname = 1;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Server::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Server* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Server*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Server::MergeFrom(const Server& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Server::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server::CopyFrom(const Server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server::IsInitialized() const {

  return true;
}

void Server::Swap(Server* other) {
  if (other != this) {
    std::swap(hostname_, other->hostname_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Server_descriptor_;
  metadata.reflection = Server_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Breakdown::kAverageFieldNumber;
const int Breakdown::kCountFieldNumber;
#endif  // !_MSC_VER

Breakdown::Breakdown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Breakdown::InitAsDefaultInstance() {
}

Breakdown::Breakdown(const Breakdown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Breakdown::SharedCtor() {
  _cached_size_ = 0;
  average_ = 0;
  count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Breakdown::~Breakdown() {
  SharedDtor();
}

void Breakdown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Breakdown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Breakdown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Breakdown_descriptor_;
}

const Breakdown& Breakdown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_memdata_2eproto();
  return *default_instance_;
}

Breakdown* Breakdown::default_instance_ = NULL;

Breakdown* Breakdown::New() const {
  return new Breakdown;
}

void Breakdown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    average_ = 0;
    count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Breakdown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double average = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &average_)));
          set_has_average();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint64 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Breakdown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double average = 1;
  if (has_average()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->average(), output);
  }

  // optional uint64 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Breakdown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double average = 1;
  if (has_average()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->average(), target);
  }

  // optional uint64 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Breakdown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double average = 1;
    if (has_average()) {
      total_size += 1 + 8;
    }

    // optional uint64 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Breakdown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Breakdown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Breakdown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Breakdown::MergeFrom(const Breakdown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_average()) {
      set_average(from.average());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Breakdown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Breakdown::CopyFrom(const Breakdown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Breakdown::IsInitialized() const {

  return true;
}

void Breakdown::Swap(Breakdown* other) {
  if (other != this) {
    std::swap(average_, other->average_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Breakdown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Breakdown_descriptor_;
  metadata.reflection = Breakdown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Stats::kPushLatencyFieldNumber;
const int Stats::kPopLatencyFieldNumber;
const int Stats::kBatchSizeFieldNumber;
const int Stats::kLoopLatencyFieldNumber;
const int Stats::kPacketLatencyFieldNumber;
const int Stats::kCacheHitFieldNumber;
const int Stats::kCacheMissFieldNumber;
const int Stats::kTouchFieldNumber;
#endif  // !_MSC_VER

Stats::Stats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stats::InitAsDefaultInstance() {
  push_latency_ = const_cast< ::memcache_router::Breakdown*>(&::memcache_router::Breakdown::default_instance());
  pop_latency_ = const_cast< ::memcache_router::Breakdown*>(&::memcache_router::Breakdown::default_instance());
  batch_size_ = const_cast< ::memcache_router::Breakdown*>(&::memcache_router::Breakdown::default_instance());
  loop_latency_ = const_cast< ::memcache_router::Breakdown*>(&::memcache_router::Breakdown::default_instance());
  packet_latency_ = const_cast< ::memcache_router::Breakdown*>(&::memcache_router::Breakdown::default_instance());
  cache_hit_ = const_cast< ::memcache_router::Breakdown*>(&::memcache_router::Breakdown::default_instance());
  cache_miss_ = const_cast< ::memcache_router::Breakdown*>(&::memcache_router::Breakdown::default_instance());
}

Stats::Stats(const Stats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stats::SharedCtor() {
  _cached_size_ = 0;
  push_latency_ = NULL;
  pop_latency_ = NULL;
  batch_size_ = NULL;
  loop_latency_ = NULL;
  packet_latency_ = NULL;
  cache_hit_ = NULL;
  cache_miss_ = NULL;
  touch_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stats::~Stats() {
  SharedDtor();
}

void Stats::SharedDtor() {
  if (this != default_instance_) {
    delete push_latency_;
    delete pop_latency_;
    delete batch_size_;
    delete loop_latency_;
    delete packet_latency_;
    delete cache_hit_;
    delete cache_miss_;
  }
}

void Stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stats_descriptor_;
}

const Stats& Stats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_memdata_2eproto();
  return *default_instance_;
}

Stats* Stats::default_instance_ = NULL;

Stats* Stats::New() const {
  return new Stats;
}

void Stats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_push_latency()) {
      if (push_latency_ != NULL) push_latency_->::memcache_router::Breakdown::Clear();
    }
    if (has_pop_latency()) {
      if (pop_latency_ != NULL) pop_latency_->::memcache_router::Breakdown::Clear();
    }
    if (has_batch_size()) {
      if (batch_size_ != NULL) batch_size_->::memcache_router::Breakdown::Clear();
    }
    if (has_loop_latency()) {
      if (loop_latency_ != NULL) loop_latency_->::memcache_router::Breakdown::Clear();
    }
    if (has_packet_latency()) {
      if (packet_latency_ != NULL) packet_latency_->::memcache_router::Breakdown::Clear();
    }
    if (has_cache_hit()) {
      if (cache_hit_ != NULL) cache_hit_->::memcache_router::Breakdown::Clear();
    }
    if (has_cache_miss()) {
      if (cache_miss_ != NULL) cache_miss_->::memcache_router::Breakdown::Clear();
    }
    touch_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .memcache_router.Breakdown push_latency = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_push_latency()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pop_latency;
        break;
      }

      // optional .memcache_router.Breakdown pop_latency = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pop_latency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pop_latency()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_batch_size;
        break;
      }

      // optional .memcache_router.Breakdown batch_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_batch_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batch_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_loop_latency;
        break;
      }

      // optional .memcache_router.Breakdown loop_latency = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loop_latency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loop_latency()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_packet_latency;
        break;
      }

      // optional .memcache_router.Breakdown packet_latency = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packet_latency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packet_latency()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cache_hit;
        break;
      }

      // optional .memcache_router.Breakdown cache_hit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cache_hit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cache_hit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_cache_miss;
        break;
      }

      // optional .memcache_router.Breakdown cache_miss = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cache_miss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cache_miss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_touch;
        break;
      }

      // optional bool touch = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_touch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &touch_)));
          set_has_touch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .memcache_router.Breakdown push_latency = 1;
  if (has_push_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->push_latency(), output);
  }

  // optional .memcache_router.Breakdown pop_latency = 2;
  if (has_pop_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pop_latency(), output);
  }

  // optional .memcache_router.Breakdown batch_size = 3;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->batch_size(), output);
  }

  // optional .memcache_router.Breakdown loop_latency = 4;
  if (has_loop_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->loop_latency(), output);
  }

  // optional .memcache_router.Breakdown packet_latency = 5;
  if (has_packet_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->packet_latency(), output);
  }

  // optional .memcache_router.Breakdown cache_hit = 6;
  if (has_cache_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cache_hit(), output);
  }

  // optional .memcache_router.Breakdown cache_miss = 7;
  if (has_cache_miss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->cache_miss(), output);
  }

  // optional bool touch = 100;
  if (has_touch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(100, this->touch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .memcache_router.Breakdown push_latency = 1;
  if (has_push_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->push_latency(), target);
  }

  // optional .memcache_router.Breakdown pop_latency = 2;
  if (has_pop_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pop_latency(), target);
  }

  // optional .memcache_router.Breakdown batch_size = 3;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->batch_size(), target);
  }

  // optional .memcache_router.Breakdown loop_latency = 4;
  if (has_loop_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->loop_latency(), target);
  }

  // optional .memcache_router.Breakdown packet_latency = 5;
  if (has_packet_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->packet_latency(), target);
  }

  // optional .memcache_router.Breakdown cache_hit = 6;
  if (has_cache_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->cache_hit(), target);
  }

  // optional .memcache_router.Breakdown cache_miss = 7;
  if (has_cache_miss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->cache_miss(), target);
  }

  // optional bool touch = 100;
  if (has_touch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(100, this->touch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .memcache_router.Breakdown push_latency = 1;
    if (has_push_latency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->push_latency());
    }

    // optional .memcache_router.Breakdown pop_latency = 2;
    if (has_pop_latency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pop_latency());
    }

    // optional .memcache_router.Breakdown batch_size = 3;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->batch_size());
    }

    // optional .memcache_router.Breakdown loop_latency = 4;
    if (has_loop_latency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loop_latency());
    }

    // optional .memcache_router.Breakdown packet_latency = 5;
    if (has_packet_latency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->packet_latency());
    }

    // optional .memcache_router.Breakdown cache_hit = 6;
    if (has_cache_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cache_hit());
    }

    // optional .memcache_router.Breakdown cache_miss = 7;
    if (has_cache_miss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cache_miss());
    }

    // optional bool touch = 100;
    if (has_touch()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stats::MergeFrom(const Stats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_push_latency()) {
      mutable_push_latency()->::memcache_router::Breakdown::MergeFrom(from.push_latency());
    }
    if (from.has_pop_latency()) {
      mutable_pop_latency()->::memcache_router::Breakdown::MergeFrom(from.pop_latency());
    }
    if (from.has_batch_size()) {
      mutable_batch_size()->::memcache_router::Breakdown::MergeFrom(from.batch_size());
    }
    if (from.has_loop_latency()) {
      mutable_loop_latency()->::memcache_router::Breakdown::MergeFrom(from.loop_latency());
    }
    if (from.has_packet_latency()) {
      mutable_packet_latency()->::memcache_router::Breakdown::MergeFrom(from.packet_latency());
    }
    if (from.has_cache_hit()) {
      mutable_cache_hit()->::memcache_router::Breakdown::MergeFrom(from.cache_hit());
    }
    if (from.has_cache_miss()) {
      mutable_cache_miss()->::memcache_router::Breakdown::MergeFrom(from.cache_miss());
    }
    if (from.has_touch()) {
      set_touch(from.touch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats::CopyFrom(const Stats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats::IsInitialized() const {

  return true;
}

void Stats::Swap(Stats* other) {
  if (other != this) {
    std::swap(push_latency_, other->push_latency_);
    std::swap(pop_latency_, other->pop_latency_);
    std::swap(batch_size_, other->batch_size_);
    std::swap(loop_latency_, other->loop_latency_);
    std::swap(packet_latency_, other->packet_latency_);
    std::swap(cache_hit_, other->cache_hit_);
    std::swap(cache_miss_, other->cache_miss_);
    std::swap(touch_, other->touch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stats_descriptor_;
  metadata.reflection = Stats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Instruction::kGetKeysFieldNumber;
const int Instruction::kSetKeysFieldNumber;
const int Instruction::kIncrKeysFieldNumber;
const int Instruction::kServersFieldNumber;
const int Instruction::kStatsFieldNumber;
#endif  // !_MSC_VER

Instruction::Instruction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Instruction::InitAsDefaultInstance() {
  stats_ = const_cast< ::memcache_router::Stats*>(&::memcache_router::Stats::default_instance());
}

Instruction::Instruction(const Instruction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Instruction::SharedCtor() {
  _cached_size_ = 0;
  stats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Instruction::~Instruction() {
  SharedDtor();
}

void Instruction::SharedDtor() {
  if (this != default_instance_) {
    delete stats_;
  }
}

void Instruction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Instruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Instruction_descriptor_;
}

const Instruction& Instruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_memdata_2eproto();
  return *default_instance_;
}

Instruction* Instruction::default_instance_ = NULL;

Instruction* Instruction::New() const {
  return new Instruction;
}

void Instruction::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (has_stats()) {
      if (stats_ != NULL) stats_->::memcache_router::Stats::Clear();
    }
  }
  get_keys_.Clear();
  set_keys_.Clear();
  incr_keys_.Clear();
  servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Instruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .memcache_router.KeyValue get_keys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_get_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_get_keys;
        if (input->ExpectTag(18)) goto parse_set_keys;
        break;
      }

      // repeated .memcache_router.KeyValue set_keys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_set_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_set_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_set_keys;
        if (input->ExpectTag(26)) goto parse_incr_keys;
        break;
      }

      // repeated .memcache_router.KeyValue incr_keys = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_incr_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_incr_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_incr_keys;
        if (input->ExpectTag(34)) goto parse_servers;
        break;
      }

      // repeated .memcache_router.Server servers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_servers;
        if (input->ExpectTag(42)) goto parse_stats;
        break;
      }

      // optional .memcache_router.Stats stats = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Instruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .memcache_router.KeyValue get_keys = 1;
  for (int i = 0; i < this->get_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->get_keys(i), output);
  }

  // repeated .memcache_router.KeyValue set_keys = 2;
  for (int i = 0; i < this->set_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->set_keys(i), output);
  }

  // repeated .memcache_router.KeyValue incr_keys = 3;
  for (int i = 0; i < this->incr_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->incr_keys(i), output);
  }

  // repeated .memcache_router.Server servers = 4;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->servers(i), output);
  }

  // optional .memcache_router.Stats stats = 5;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stats(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Instruction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .memcache_router.KeyValue get_keys = 1;
  for (int i = 0; i < this->get_keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->get_keys(i), target);
  }

  // repeated .memcache_router.KeyValue set_keys = 2;
  for (int i = 0; i < this->set_keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->set_keys(i), target);
  }

  // repeated .memcache_router.KeyValue incr_keys = 3;
  for (int i = 0; i < this->incr_keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->incr_keys(i), target);
  }

  // repeated .memcache_router.Server servers = 4;
  for (int i = 0; i < this->servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->servers(i), target);
  }

  // optional .memcache_router.Stats stats = 5;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stats(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Instruction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional .memcache_router.Stats stats = 5;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats());
    }

  }
  // repeated .memcache_router.KeyValue get_keys = 1;
  total_size += 1 * this->get_keys_size();
  for (int i = 0; i < this->get_keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->get_keys(i));
  }

  // repeated .memcache_router.KeyValue set_keys = 2;
  total_size += 1 * this->set_keys_size();
  for (int i = 0; i < this->set_keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->set_keys(i));
  }

  // repeated .memcache_router.KeyValue incr_keys = 3;
  total_size += 1 * this->incr_keys_size();
  for (int i = 0; i < this->incr_keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->incr_keys(i));
  }

  // repeated .memcache_router.Server servers = 4;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Instruction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Instruction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Instruction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Instruction::MergeFrom(const Instruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  get_keys_.MergeFrom(from.get_keys_);
  set_keys_.MergeFrom(from.set_keys_);
  incr_keys_.MergeFrom(from.incr_keys_);
  servers_.MergeFrom(from.servers_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_stats()) {
      mutable_stats()->::memcache_router::Stats::MergeFrom(from.stats());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Instruction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Instruction::CopyFrom(const Instruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instruction::IsInitialized() const {

  return true;
}

void Instruction::Swap(Instruction* other) {
  if (other != this) {
    get_keys_.Swap(&other->get_keys_);
    set_keys_.Swap(&other->set_keys_);
    incr_keys_.Swap(&other->incr_keys_);
    servers_.Swap(&other->servers_);
    std::swap(stats_, other->stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Instruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Instruction_descriptor_;
  metadata.reflection = Instruction_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace memcache_router

// @@protoc_insertion_point(global_scope)
